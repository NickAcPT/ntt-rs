/*
 Generated by typeshare 1.0.0
*/

import type { Uuid } from "@/types/types";
import type { Weekday } from "@/types/types";

/** A user that is stored in the database. */
export interface EnhancedUser {
  /** The user's ID. */
  id: Uuid;
  /** The user's username. */
  name: string;
  /** The user's time tables. */
  timetables: EnhancedTimeTable[];
}

/**
 * A time table that is stored in the database.
 * Permissions are not included in this struct since by this point they have already been checked.
 */
export interface EnhancedTimeTable {
  /** The time table's ID. */
  id: Uuid;
  /** The time table's name. */
  name: string;
  /** The time table's owner. */
  owner: Uuid;
  /** Entries in the time table. */
  entries: EnhancedTimeTableEntry[];
}

/** A time table entry that is stored in the database. */
export interface EnhancedTimeTableEntry {
  /** The time table entry's ID. */
  id: Uuid;
  /**
   * The time table entry's type.
   * This is used to determine which fields are valid.
   */
  entry_type: "RECURRING" | "OneTime";
  /** The user who authored this last change to this time table entry. */
  author: Uuid;
  /** The time table entry's start date. */
  start_date: Date;
  /**
   * The time table entry's start time.
   * Only the time component should be used.
   */
  start_time: Date;
  /**
   * The time table entry's end time.
   * Only the time component should be used.
   */
  end_time: Date;
  /** The time table entry's duration. */
  duration: number;
  /**
   * The time table entry's recurrence interval.
   * If this is `None`, then this is a one-time entry.
   */
  recurring_event?: RecurringTimeTableEntry;
}

export interface RecurringTimeTableEntry {
  end_date: Date;
  repeats_every: RepeatingInterval;
}

export type RepeatingInterval = { type: "Weekly"; content: Weekday[] };
